schema {
  query: Query
  mutation: Mutation
}

# Root Query Type
type Query {
  products(
    filter: ProductFilter
    sort: ProductSort
    pagination: PaginationInput
  ): [Product]
  product(id: ID!): Product
  categories: [Category]
  category(id: ID!): Category
  orders(
    filter: OrderFilter
    sort: OrderSort
    pagination: PaginationInput
  ): [Order]
  order(id: ID!): Order
  users(filter: UserFilter, sort: UserSort, pagination: PaginationInput): [User]
  user(id: ID!): User
  images: [Image]
}

# Root Mutation Type
type Mutation {
  addProduct(input: ProductInput!): Product
  updateProduct(id: ID!, input: ProductInput!): Product
  deleteProduct(id: ID!): Boolean
  addCategory(input: CategoryInput!): Category
  updateCategory(id: ID!, input: CategoryInput!): Category
  deleteCategory(id: ID!): Boolean
  addOrder(input: OrderInput!): Order
  updateOrder(id: ID!, input: OrderInput!): Order
  deleteOrder(id: ID!): Boolean
  addUser(input: UserInput!): User
  updateUser(id: ID!, input: UserInput!): User
  deleteUser(id: ID!): Boolean
  addImage(input: ImageInput!): Image
}

# Types
type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  stock: Int!
  category: Category
  images: [Image]
}

type Image {
  id: ID!
  url: String
  product: Product
}

type Category {
  id: ID!
  name: String!
  description: String
  products: [Product]
}

type Order {
  id: ID!
  user: User!
  products: [OrderProduct!]!
  total: Float!
  status: OrderStatus!
  createdAt: String!
  updatedAt: String!
}

type OrderProduct {
  product: Product!
  quantity: Int!
  price: Float!
}

type User {
  id: ID!
  name: String!
  email: String!
  orders: [Order]
}

# Enums
enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

# Inputs
input ProductInput {
  name: String!
  description: String
  price: Float!
  stock: Int!
  categoryId: ID!
}

input ImageInput {
  productId: ID!
  url: String!
}

input CategoryInput {
  name: String!
  description: String
}

input OrderInput {
  userId: ID!
  products: [OrderProductInput!]!
}

input OrderProductInput {
  productId: ID!
  quantity: Int!
  price: Float!
}

input UserInput {
  name: String!
  email: String!
}

# Filters
input ProductFilter {
  name: String
  categoryId: ID
  priceRange: PriceRange
}

input OrderFilter {
  userId: ID
  status: OrderStatus
}

input UserFilter {
  name: String
  email: String
}

input PriceRange {
  min: Float
  max: Float
}

# Sort Inputs
input ProductSort {
  field: ProductSortField!
  order: SortOrder!
}

enum ProductSortField {
  NAME
  PRICE
  STOCK
}

input OrderSort {
  field: OrderSortField!
  order: SortOrder!
}

enum OrderSortField {
  CREATED_AT
  TOTAL
}

input UserSort {
  field: UserSortField!
  order: SortOrder!
}

enum UserSortField {
  NAME
  EMAIL
}

enum SortOrder {
  ASC
  DESC
}

# Pagination
input PaginationInput {
  limit: Int
  offset: Int
}
